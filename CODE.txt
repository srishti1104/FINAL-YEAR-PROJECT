from sklearn import neighbors, datasets, preprocessing
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import plot_confusion_matrix
from sklearn.metrics import precision_recall_curve
from sklearn.metrics import plot_precision_recall_curve
from sklearn.metrics import average_precision_score
import pandas as pd
import matplotlib.pyplot as plt

#KNN CLASSIFIER

from sklearn.neighbors import KNeighborsClassifier
df = pd.read_csv('heart.csv')
df.head()
df.info()
df.describe()
import seaborn as sns
#correlation between features 
corrmat = df.corr()
top_corr_features = corrmat.index
plt.figure(figsize = (20,20))
#plotting heat map
g=sns.heatmap(df[top_corr_features].corr(),annot=True,cmap="RdYlGn")
df.hist()
sns.set_style('whitegrid')
sns.countplot(x='target' , data=df,palette = 'RdBu_r')
dataset = pd.get_dummies(df, columns = ['sex','cp','fbs','restecg','exang','slope','ca','thal'])
dataset.head()
y = dataset['target']
X = dataset.drop(['target'], axis = 1)
from sklearn.model_selection import cross_val_score
knn_scores = []
for k in range(1,12):
    knn_classifier = KNeighborsClassifier(n_neighbors = k)
    score= cross_val_score(knn_classifier,X,y,cv=10)
    knn_scores.append(score.mean())
plt.plot([k for k in range(1,12)], knn_scores, color = 'red')
for i in range(1,12):
    plt.text(i, knn_scores[i-1],(i, knn_scores[i-1]))
plt.xticks([i for i in range(1,12)])
plt.xlabel('Numbers of Neighbors (K)')
plt.ylabel('scores')
plt.title('K Neighbors Classifier scores for different K values')
Xtrain, Xtest, y_train, y_test = train_test_split(X, y, stratify = y, random_state = 0, train_size = 0.7)
scaler = preprocessing.StandardScaler().fit(Xtrain)
Xtrain = scaler.transform(Xtrain)
Xtest = scaler.transform(Xtest)
knn = KNeighborsClassifier(n_neighbors=10)
knn.fit(Xtrain, y_train)
y_pred = knn.predict(Xtest)
titles_options = [("Confusion matrix, without normalization", None),
                  ("Normalized confusion matrix", 'true')]
for title, normalize in titles_options:
    disp = plot_confusion_matrix(knn, Xtest, y_test,
                                  cmap=plt.cm.Blues,
                                 normalize=normalize)
    disp.ax_.set_title(title)

    print(title)
    print(disp.confusion_matrix)

plt.show()
average_precision = average_precision_score(y_test, y_pred)
disp = plot_precision_recall_curve(knn, Xtest, y_test)
disp.ax_.set_title('Precision-Recall curve: '
                   .format(average_precision))

print("Accuracy : ",metrics.accuracy_score(y_test, y_pred)*100)

#DECISION TREE CLASSIFIER

from sklearn.tree import DecisionTreeClassifier
Xtrain, Xtest, y_train, y_test = train_test_split(X, y, stratify = y, random_state = 0, train_size = 0.7)
# Create Decision Tree classifer object
clf = DecisionTreeClassifier()
# Train Decision Tree Classifer
clf = clf.fit(Xtrain,y_train)
#Predict the response for test dataset
y_pred = clf.predict(Xtest)
titles_options = [("Confusion matrix, without normalization", None),
                  ("Normalized confusion matrix", 'true')]
for title, normalize in titles_options:
    disp = plot_confusion_matrix(clf, Xtest, y_test,
                                  cmap=plt.cm.Blues,
                                 normalize=normalize)
    disp.ax_.set_title(title)

    print(title)
    print(disp.confusion_matrix)

plt.show()
print(classification_report(y_test, y_pred))
average_precision = average_precision_score(y_test, y_pred)
disp = plot_precision_recall_curve(clf, Xtest, y_test)
disp.ax_.set_title('Precision-Recall curve: '
                   .format(average_precision))
print("Accuracy : ",metrics.accuracy_score(y_test, y_pred)*100)

#NAIVE BAYES CLASSIFIER

from sklearn.naive_bayes import GaussianNB 
Xtrain, Xtest, y_train, y_test = train_test_split(X, y, stratify = y, random_state = 0, train_size = 0.7)
model = GaussianNB()

model.fit(Xtrain, y_train)

#Predict the response for test dataset
y_pred = model.predict(Xtest)
titles_options = [("Confusion matrix, without normalization", None),
                  ("Normalized confusion matrix", 'true')]
for title, normalize in titles_options:
    disp = plot_confusion_matrix(model, Xtest, y_test,
                                  cmap=plt.cm.Blues,
                                 normalize=normalize)
    disp.ax_.set_title(title)

    print(title)
    print(disp.confusion_matrix)

plt.show()
print(classification_report(y_test, y_pred))
average_precision = average_precision_score(y_test, y_pred)
disp = plot_precision_recall_curve(model, Xtest, y_test)
disp.ax_.set_title('Precision-Recall curve: '
                   .format(average_precision))
print("Accuracy :",metrics.accuracy_score(y_test, y_pred)*100)






